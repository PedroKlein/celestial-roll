name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev

      - name: Install MinGW (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw

      - name: Set GCC/MinGW as the compiler (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          $env:PATH = 'C:\tools\mingw64\bin;' + $env:PATH
          $env:CC = 'gcc'
          $env:CXX = 'g++'

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cmake -G "MinGW Makefiles" -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}

      - name: Configure CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Prepare release assets (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release_assets
          cp -r ${{ github.workspace }}/resources release_assets/
          cp ${{ steps.strings.outputs.build-output-dir }}/celestial_roll release_assets/
          echo "release_assets_dir=${{ github.workspace }}/release_assets" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Prepare release assets (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release_assets
          cp -r ${{ github.workspace }}/resources release_assets/
          cp ${{ steps.strings.outputs.build-output-dir }}/celestial_roll.exe release_assets/
          echo "release_assets_dir=${{ github.workspace }}/release_assets" >> "$GITHUB_OUTPUT"
        shell: pwsh

    outputs:
      release_assets_dir: ${{ steps.prepare_assets.outputs.release_assets_dir }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }} # Replace PAT with your secret name
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        if: needs.build.outputs.release_assets_dir != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.release_assets_dir }}/celestial_roll
          asset_name: celestial_roll
          asset_content_type: application/octet-stream

      - name: Upload Windows binary (if available)
        if: needs.build.outputs.release_assets_dir != '' && env.RUNNER_OS == 'Windows'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.release_assets_dir }}/celestial_roll.exe
          asset_name: celestial_roll.exe
          asset_content_type: application/octet-stream

      - name: Upload resources
        if: needs.build.outputs.release_assets_dir != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.release_assets_dir }}/resources.zip
          asset_name: resources.zip
          asset_content_type: application/zip
